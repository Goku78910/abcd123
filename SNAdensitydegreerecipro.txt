1) Density
>vcount(g)
[1] 7
>ecount(g)
[1] 10
>ecount(g)/(vcount(g)*(vcount(g)-1)/2)
[1] 0.4719
2)Degree
>degree(net)
s01 s02 s03 s04 s05 s06 s07 s08 s09 s10 s11 s12
10 7 13 9 5 8 5 6 5 5 3 6
s13 s14 s15 s16 s17
4 4 6 3 5
3)Reciprocity:
>dg<- graph.formula(1-+2, 1-+3, 2++3)
>plot(dg)
>reciprocity(dg)
[1] 0.5
⚫ Formula
>dyad.census(dg)
$mut
[1] 1
$asym
[1] 2
$null
[1] 0
> 2*dyad.census(dg)$mut/ecount(dg)
[1] 0.5
4) Transitivity
>kite<- graph.famous("Krackhardt_Kite")
>atri<- adjacent.triangles(kite)
>plot(kite, vertex.label=atri)
>transitivity(kite, type="local")
[1] 0.6666667 0.6666667 1.0000000 0.5333333 1.0000000 0.5000000
[7] 0.5000000 0.3333333 0.0000000 NaN
Formula
>adjacent.triangles(kite) / (degree(kite) * (degree(kite)-1)/2)
[1] 0.6666667 0.6666667 1.0000000 0.5333333 1.0000000 0.5000000
[7] 0.5000000 0.3333333 0.0000000 NaN
5) Centralization
⚫ Degree of centrality
>centralization.degree(net, mode="in", normalized=T)
$res
[1] 5 3 6 4 1 5 1 2 4 4 3 3 2 2 2 1 4
$centralization
[1] 0.1838235
$theoretical_max
[1] 272
⚫ Closeness Centralization
>closeness(net, mode="all", weights=NA)
s01 s02 s03 s04 s05 s06 s07
0.03333333 0.03030303 0.04166667 0.03846154 0.03225806 0.03125000 0.03030303
s08 s09 s10 s11 s12 s13 s14
0.02857143 0.02564103 0.02941176 0.03225806 0.03571429 0.02702703 0.02941176
s15 s16 s17
0.03030303 0.02222222 0.02857143
>centralization.closeness(net, mode="all", normalized=T)
$res
[1] 0.5333333 0.4848485 0.6666667 0.6153846 0.5161290 0.5000000 0.4848485
[8] 0.4571429 0.4102564 0.4705882 0.5161290 0.5714286 0.4324324 0.4705882
[15] 0.4848485 0.3555556 0.4571429
$centralization
[1] 0.3753596
$theoretical_max
[1] 7.741935
⚫ Betweeness Centrality
>betweenness(net, directed=T, weights=NA)
s01 s02 s03 s04 s05 s06 s07
26.857143 6.238095 126.511905 92.642857 13.000000 20.333333 1.750000
s08 s09 s10 s11 s12 s13 s14
21.000000 1.000000 15.000000 0.000000 33.500000 20.000000 4.000000
s15 s16 s17
5.666667 0.000000 58.500000
>edge.betweenness(net, directed=T, weights=NA)
[1] 6.619048 6.619048 11.785714 8.333333 6.500000 11.166667 21.333333
[8] 4.250000 4.250000 16.000000 64.476190 9.500000 3.261905 3.261905
[15] 15.000000 1.000000 15.000000 17.000000 16.750000 2.000000 1.250000
[22] 8.000000 12.500000 4.000000 26.000000 18.000000 14.500000 17.000000
[29] 7.500000 4.500000 2.738095 23.000000 11.000000 31.000000 9.011905
[36] 18.000000 28.500000 0.000000 3.000000 6.500000 17.000000 8.666667
[43] 74.500000 11.750000 34.000000 4.500000 6.333333 8.809524 5.333333
[50] 3.000000 28.000000 10.000000
>centralization.betweenness(net, directed=T, normalized=T)
$res
[1] 26.857143 6.238095 126.511905 92.642857 13.000000 20.333333
[7] 1.750000 21.000000 1.000000 15.000000 0.000000 33.500000
[13] 20.000000 4.000000 5.666667 0.000000 58.500000
$centralization
[1] 0.4439329
$theoretical_max
[1] 3840
⚫ Eigenvector centrality
>centralization.evcent(net, directed=T, normalized=T)
$vector
[1] 0.7694528 0.5623895 1.0000000 0.8569443 0.3049992 0.9285033 0.1025656
[8] 0.3362816 0.4696841 0.6510633 0.6361813 0.6479337 0.2674341 0.2289017
[15] 0.3277070 0.2831928 0.7125008
$value
[1] 3.278697
$options
$options$bmat
[1] "I"
$options$n
[1] 17
$options$which
[1] "LR"
$options$nev
[1] 1
$options$tol
$options$ncv
[1] 0
$options$ldv
[1] 0
$options$ishift
[1] 1
$options$maxiter
[1] 3000
$options$nb
[1] 1
$options$mode
[1] 1
$options$start
[1] 1
$options$sigma
[1] 0
$options$sigmai
[1] 0
$options$info
[1] 0
$options$iter
[1] 7
$options$nconv
[1] 1
$options$numop
[1] 31
$options$numopb
[1] 0
Mohd Maaz Shaikh - 4100058
$options$numreo
[1] 18
$centralization
[1] 0.4946416
$theoretical_max
[1] 16
6)Clustering
>library(igraph)
# let's generate two networks and merge them into one graph.
>g2 <- barabasi.game(50, p=2, directed=F)
>g1 <- watts.strogatz.game(1, size=100, nei=5, p=0.05)
>g <- graph.union(g1,g2)
#Let's remove multi-edges and loops
>g <- simplify(g)
# 1st we calculate the edge betweenness,
>ebc<- edge.betweenness.community(g, directed=F)
>mods<- sapply(0:ecount(g), function(i)
{
[1] 0
g2 <- delete.edges(g, ebc$removed.edges[seq(length=i)])
cl<- clusters(g2)$membership
modularity(g,cl)
})
# Now, let's color the nodes according to their membership
>g2<-delete.edges(g, ebc$removed.edges[seq(length=which.max(mods)-1)])
>V(g)$color=clusters(g2)$membership
# Let's choose a layout for the graph
>g$layout<- layout.fruchterman.reingold
# plot it
>plot(g, vertex.label=NA)
# fastgreedy.communityagorithm
>fc<- fastgreedy.community(g)
>com<-community.to.membership(g, fc$merges, steps= which.max(fc$modularity)-1)
>V(g)$color <- com$membership+1
>g$layout<- layout.fruchterman.reingold
>plot(g, vertex.label=NA)