MainActivity.java
package com.example.prashant.firebasedemo;
import android.support.v7.app.AppCompatActivity;import android.os.Bundle;
import android.app.Notification;
import android.app.NotificationManager;import
android.content.Context;
import android.os.Build; import
android.os.Bundle;
import android.support.v7.app.AppCompatActivity;import android.util.Log;
import android.view.View; import
android.widget.Button;import
android.widget.Toast;
import com.google.firebase.iid.FirebaseInstanceId; import
com.google.firebase.messaging.FirebaseMessaging;
public class MainActivity extends AppCompatActivity {
private static final String TAG = "MainActivity";@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
if (getIntent().getExtras() != null) {
for (String key : getIntent().getExtras().keySet()) {Object value =
getIntent().getExtras().get(key); Log.d(TAG, "Key: " + key + " Value: " +
value);
}
17
}
// [END handle_data_extras]
Button subscribeButton = (Button)findViewById(R.id.button3);
subscribeButton.setOnClickListener(newView.OnClickListener()
{
@Override
public void onClick(View v) {
// [START subscribe_topics]
FirebaseMessaging.getInstance().subscribeToTopic("news");
// [END subscribe_topics]
// Log and toast
String msg = getString(R.string.msg_subscribed);Log.d(TAG, msg);
Toast.makeText(MainActivity.this, msg,
Toast.LENGTH_SHORT).show();
}
});
Button logTokenButton = (Button)findViewById(R.id.button4);
logTokenButton.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
// Get token String
token =
FirebaseInstanceId.getInstance().getToken();
// Log and toast Log.d(TAG,
"Done");
Toast.makeText(MainActivity.this, "Done",
Toast.LENGTH_SHORT).show();
}
});
}
}
MyFirebaseInstanceIDService.java
package com.example.prashant.firebasedemo;
/**
* Created by PRASHANT on 13-Nov-17.
18
*/
import android.util.Log;
import com.google.firebase.iid.FirebaseInstanceId;
import com.google.firebase.iid.FirebaseInstanceIdService;
public class MyFirebaseInstanceIDService extendsFirebaseInstanceIdService {
private static final String TAG = "MyFirebaseIIDService";
/**
* Called if InstanceID token is updated. This may occur if thesecurity of
* the previous token had been compromised. Note that this iscalled when the
InstanceID token
* is initially generated so this is where you would retrieve thetoken.
*/
// [START refresh_token]
@Override
public void onTokenRefresh() {
// Get updated InstanceID token.String
refreshedToken =
FirebaseInstanceId.getInstance().getToken();
Log.d(TAG, "Refreshed token: " + refreshedToken);
// If you want to send messages to this application instance
or
// manage this apps subscriptions on the server side, send the
// Instance ID token to your app server. sendRegistrationToServer(refreshedToken);
}
// [END refresh_token]
/**
* Persist token to third-party servers.
*
* Modify this method to associate the user's FCM InstanceID tokenwith any server-side
account
* maintained by your application.
*
* @param token The new token.
*/
private void sendRegistrationToServer(String token) {
// TODO: Implement this method to send token to your app
server.
}
}
19
MyFirebaseMessagingService.java
package com.example.prashant.firebasedemo;
/**
* Created by PRASHANT on 13-Nov-17.
*/
import android.app.NotificationManager;import
android.app.PendingIntent; import
android.content.Context;
import android.content.Intent;
import android.media.RingtoneManager;import
android.net.Uri;
import android.support.v4.app.NotificationCompat;import android.util.Log;
import com.google.firebase.*;
import com.google.firebase.messaging.FirebaseMessagingService;import
com.google.firebase.messaging.RemoteMessage;
import com.firebase.jobdispatcher.Constraint;
import com.firebase.jobdispatcher.FirebaseJobDispatcher;import
com.firebase.jobdispatcher.GooglePlayDriver; import
com.firebase.jobdispatcher.Job;
public class MyFirebaseMessagingService extendsFirebaseMessagingService {
private static final String TAG = "MyFirebaseMsgService";
/**
* Called when message is received.
*
* @param remoteMessage Object representing the message receivedfrom Firebase Cloud
Messaging.
*/
// [START receive_message]
@Override
public void onMessageReceived(RemoteMessage remoteMessage) {
// [START_EXCLUDE]
// There are two types of messages data messages andnotification messages. Data
messages are handled
// here in onMessageReceived whether the app is in theforeground or background.
Data messages are the type
// traditionally used with GCM. Notification messages are onlyreceived here in
onMessageReceived when the app
20
// is in the foreground. When the app is in the background anautomatically generated notification is
displayed.
// When the user taps on the notification they are returned tothe app. Messages containing
both notification
// and data payloads are treated as notification messages. TheFirebase console always sends
notification
// messages. For more see: https://firebase.google.com/docs/cloudmessaging/concept-options
// [END_EXCLUDE]
// TODO(developer): Handle FCM messages here.
// Not getting messages here? See why this may be:https://goo.gl/39bRNJ
Log.d(TAG, "From: " + remoteMessage.getFrom());
// Check if message contains a data payload.if
(remoteMessage.getData().size() > 0) {
Log.d(TAG, "Message data payload: " +
remoteMessage.getData());
if (/* Check if data needs to be processed by long runningjob */ true) {
// For long-running tasks (10 seconds or more) useFirebase Job Dispatcher.
scheduleJob();
} else {
// Handle message within 10 secondshandleNow();
}
}
// Check if message contains a notification payload.if
(remoteMessage.getNotification() != null) {
Log.d(TAG, "Message Notification Body: " +
remoteMessage.getNotification().getBody());
}
// Also if you intend on generating your own notifications asa result of a received FCM
// message, here is where that should be initiated. SeesendNotification method below.
}
// [END receive_message]
/**
* Schedule a job using FirebaseJobDispatcher.
*/
private void scheduleJob() {
// [START dispatch_job] FirebaseJobDispatcher
dispatcher = new
FirebaseJobDispatcher(new GooglePlayDriver(this));
21
}
/**
Job myJob = dispatcher.newJobBuilder()
.setService(MyJobService.class)
.setTag("my-job-tag")
.build(); dispatcher.schedule(myJob);
// [END dispatch_job]
* Handle time allotted to BroadcastReceivers.
*/
private void handleNow() {
Log.d(TAG, "Short lived task is done.");
}
/**
* Create and show a simple notification containing the receivedFCM message.
*
* @param messageBody FCM message body received.
*/
private void sendNotification(String messageBody) { Intent intent = new Intent(this,
MainActivity.class);intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
PendingIntent pendingIntent = PendingIntent.getActivity(this,
0 /* Request code */, intent,
PendingIntent.FLAG_ONE_SHOT);
// String channelId = getString(R.string.default_notification_channel_id);
Uri defaultSoundUri= RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
NotificationCompat.Builder notificationBuilder =new
NotificationCompat.Builder(this)
.setSmallIcon(R.mipmap.ic_launcher)
.setContentTitle("FCM Message")
.setContentText(messageBody)
.setAutoCancel(true)
.setSound(defaultSoundUri)
.setContentIntent(pendingIntent);
NotificationManager notificationManager =
(NotificationManager)
getSystemService(Context.NOTIFICATION_SERVICE);
notificationManager.notify(0 /* ID of notification */,notificationBuilder.build());
}
}
22
MyJobService.java
package com.example.prashant.firebasedemo;
/**
* Created by PRASHANT on 13-Nov-17.
*/
import android.util.Log;
import com.firebase.jobdispatcher.JobParameters;import
com.firebase.jobdispatcher.JobService;
public class MyJobService extends JobService {
private static final String TAG = "MyJobService";@Override
public boolean onStartJob(JobParameters jobParameters) { Log.d(TAG, "Performing long
running task in scheduled job");
// TODO(developer): add long running task here.return false;
}
@Override
public boolean onStopJob(JobParameters jobParameters) {return false;
}
}